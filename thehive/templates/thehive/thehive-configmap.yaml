apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
data:
  application.conf: |
    play.http.secret.key = "{{ .Values.theHiveApp.secret }}"
    db.janusgraph {
      storage {
        backend = cql
        # set cassandra hostnames
        hostname = ["{{ .Values.hostname.cassandra.value }}"]
        # Cassandra authentication (if configured)
        username = "{{ .Values.hostname.cassandra.user }}"
        password = "{{ .Values.hostname.cassandra.password }}"
        cql {
          cluster-name = "{{ .Values.hostname.cassandra.clustername }}"
          keyspace = "{{ .Values.hostname.cassandra.keyspace }}"
        }
      }
      index.search {
        backend = elasticsearch
        # Set elasticsearch hostnames
        hostname = ["{{ .Values.hostname.elasticSearch.value }}"]
        index-name = "{{ .Values.hostname.elasticSearch.index }}"
      }
    }
    # Attachment storage configuration
    storage {
      provider = s3
      # Minio endpoint
      s3 {
        endpoint = "{{ .Values.hostname.minio.value }}"
        bucket = "{{ .Values.hostname.minio.bucket }}"
        # Fill in credentials
        accessKey = "{{ .Values.hostname.minio.accessKey }}"
        secretKey = "{{ .Values.hostname.minio.secretKey }}"
      }
    }
    # If using storage.provider = s3
    alpakka.s3.access-style = path
    alpakka.s3.endpoint-url = ${storage.s3.endpoint}

    # Service configuration
    # baseUrl should be changed to reflect how the application is exposed
    application.baseUrl = "{{ .Values.theHiveApp.baseUrl }}"
    play.http.context = "/"

    # Additional modules
    #
    # TheHive is strongly integrated with Cortex and MISP.
    # Both modules are enabled by default. If not used, each one can be disabled by
    # commenting the configuration line.
    scalligraph.modules += org.thp.thehive.connector.cortex.CortexModule
    scalligraph.modules += org.thp.thehive.connector.misp.MispModule

    # Kubernetes config for cluster discovery
    singleInstance = false
    akka.management {
      cluster.bootstrap {
        contact-point-discovery {
          discovery-method = kubernetes-api
          required-contact-point-nr = 0
        }
      }
    }
    akka.extensions = ["akka.management.cluster.bootstrap.ClusterBootstrap"]

    akka.discovery {
      kubernetes-api {
        pod-label-selector = "app={{ .Release.Name }}"
      }
    }
