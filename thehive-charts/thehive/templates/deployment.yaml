apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "thehive.fullname" . }}
  labels:
    {{- include "thehive.labels" . | nindent 4 }}
spec:
  {{- if not .Values.thehive.autoscaling.enabled }}
  replicas: {{ .Values.thehive.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "thehive.selectorLabels" . | nindent 6 }}
  {{- with .Values.thehive.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.thehive.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "thehive.labels" . | nindent 8 }}
        {{- with .Values.thehive.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "thehive.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.thehive.podSecurityContext | nindent 8 }}
      {{- if or .Values.thehive.initContainers.checkCassandra.enabled .Values.thehive.initContainers.checkElasticsearch.enabled }}
      # See https://kubernetes.io/docs/concepts/workloads/pods/init-containers/#init-containers-in-use
      initContainers:
        {{- if .Values.thehive.initContainers.checkCassandra.enabled }}
        - name: check-cassandra
          image: "{{ .Values.thehive.initContainers.image.registry }}/{{ .Values.thehive.initContainers.image.repository }}:{{ .Values.thehive.initContainers.image.tag }}"
          imagePullPolicy: {{ .Values.thehive.initContainers.image.pullPolicy }}
          {{- if and (.Values.cassandra.enabled) (eq (len .Values.thehive.database.hostnames) 0) }}
          command: ['sh', '-c', "until nc -v -z {{ printf "%s-cassandra" .Release.Name | trunc 63 }} 9042; do echo 'Waiting for Cassandra'; sleep 5; done"]
          {{- else }}
          command: ['sh', '-c', "until nc -v -z {{ index .Values.thehive.database.hostnames 0 }} 9042; do echo 'Waiting for Cassandra'; sleep 5; done"]
          {{- end }}
        {{- end }}
        {{- if .Values.thehive.initContainers.checkElasticsearch.enabled }}
        - name: check-elasticsearch
          image: "{{ .Values.thehive.initContainers.image.registry }}/{{ .Values.thehive.initContainers.image.repository }}:{{ .Values.thehive.initContainers.image.tag }}"
          imagePullPolicy: {{ .Values.thehive.initContainers.image.pullPolicy }}
          {{- if and (.Values.elasticsearch.enabled) (eq (len .Values.thehive.index.hostnames) 0) }}
          command: ['sh', '-c', "until wget --no-cache --no-check-certificate --spider http://{{ printf "%s-elasticsearch" .Release.Name | trunc 63 }}:9200/_cluster/health; do echo 'Waiting for ElasticSearch'; sleep 5; done"]
          {{- else }}
          command: ['sh', '-c', "until wget --no-cache --no-check-certificate --spider http://{{ index .Values.thehive.index.hostnames 0 }}:9200/_cluster/health; do echo 'Waiting for ElasticSearch'; sleep 5; done"]
          {{- end }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.thehive.securityContext | nindent 12 }}
          image: "{{ .Values.thehive.image.registry }}/{{ .Values.thehive.image.repository }}:{{ .Values.thehive.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.thehive.image.pullPolicy }}
          command:
            - "/opt/thehive/entrypoint"
          {{- with .Values.thehive.extraCommand }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            {{- if .Values.thehive.extraEnv }}
            {{- toYaml .Values.thehive.extraEnv | nindent 12 }}
            {{- end }}
            - name: JVM_OPTS
              value: {{ .Values.thehive.jvmOpts | quote }}
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- if .Values.thehive.database.k8sSecretName }}
            - name: TH_CQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.thehive.database.k8sSecretName }}
                  key: {{ .Values.thehive.database.k8sSecretKey }}
            {{- end }}
            {{- if .Values.thehive.index.k8sSecretName }}
            - name: TH_ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.thehive.index.k8sSecretName }}
                  key: {{ .Values.thehive.index.k8sSecretKey }}
            {{- end }}
            {{- if .Values.thehive.storage.k8sSecretName }}
            - name: TH_S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.thehive.storage.k8sSecretName }}
                  key: {{ .Values.thehive.storage.k8sSecretKey }}
            {{- end }}
            {{- if .Values.thehive.k8sSecretName }}
            - name: TH_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.thehive.k8sSecretName }}
                  key: {{ .Values.thehive.k8sSecretKey }}
            {{- end }}
            {{- if .Values.thehive.cortex.k8sSecretName }}
            - name: TH_CORTEX_KEYS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.thehive.cortex.k8sSecretName }}
                  key: {{ .Values.thehive.cortex.k8sSecretKey }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "thehive.fullname" . }}-env
            {{- if or (not .Values.thehive.database.k8sSecretName) (not .Values.thehive.index.k8sSecretName) (not .Values.thehive.storage.k8sSecretName) (not .Values.thehive.k8sSecretName) }}
            - secretRef:
                name: {{ include "thehive.fullname" . }}-secrets
            {{- end }}
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          {{- if .Values.thehive.startupProbe.enabled }}
          startupProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .Values.thehive.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.thehive.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.thehive.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.thehive.startupProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.thehive.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /api/status
              port: http
            initialDelaySeconds: {{ .Values.thehive.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.thehive.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.thehive.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.thehive.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.thehive.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /api/status
              port: http
            initialDelaySeconds: {{ .Values.thehive.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.thehive.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.thehive.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.thehive.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.thehive.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.thehive.resources | nindent 12 }}
          {{- if or .Values.thehive.volumeMounts .Values.thehive.applicationConf }}
          volumeMounts:
          {{- if .Values.thehive.applicationConf }}
            - name: config
              mountPath: /etc/thehive/application.conf
              subPath: application.conf
              readOnly: true
          {{- end -}}
          {{- with .Values.thehive.volumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
      {{- if or .Values.thehive.volumes .Values.thehive.applicationConf }}
      volumes:
      {{- if .Values.thehive.applicationConf }}
        - name: config
          configMap:
            name: {{ include "thehive.fullname" . }}-config
      {{- end -}}
      {{- with .Values.thehive.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      {{- with .Values.thehive.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.thehive.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.thehive.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
